//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WebBanGiay.Models
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    
    public partial class Product
    {
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2214:DoNotCallOverridableMethodsInConstructors")]
        public Product()
        {
            this.ProductImages = new HashSet<ProductImage>();
            this.ProductReviews = new HashSet<ProductReview>();
            this.ProductVariants = new HashSet<ProductVariant>();
            this.ProductComboDetails = new HashSet<ProductComboDetail>();
            this.ComboTemplateDetails = new HashSet<ComboTemplateDetail>();
        }
    
        public int ProductID { get; set; }
        public string ProductName { get; set; }
        public string ProductCode { get; set; }
        public Nullable<int> CategoryID { get; set; }
        public Nullable<int> BrandID { get; set; }
        public string Description { get; set; }
        public string Gender { get; set; }
        public Nullable<bool> IsActive { get; set; }
        public Nullable<System.DateTime> CreatedDate { get; set; }
        public Nullable<int> CreatedBy { get; set; }
        public Nullable<int> MaterialID { get; set; }
    
        public virtual Brand Brand { get; set; }
        public virtual Category Category { get; set; }
        public virtual Employee Employee { get; set; }
        public virtual Material Material { get; set; }
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<ProductImage> ProductImages { get; set; }
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<ProductReview> ProductReviews { get; set; }
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<ProductVariant> ProductVariants { get; set; }
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<ProductComboDetail> ProductComboDetails { get; set; }
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<ComboTemplateDetail> ComboTemplateDetails { get; set; }

        // Helper methods
        public decimal GetMinPrice()
        {
            var activeVariants = ProductVariants?.Where(v => v.IsActive == true).ToList();
            return activeVariants != null && activeVariants.Any() ? activeVariants.Min(v => v.Price) : 0;
        }

        public decimal GetMaxPrice()
        {
            var activeVariants = ProductVariants?.Where(v => v.IsActive == true).ToList();
            return activeVariants != null && activeVariants.Any() ? activeVariants.Max(v => v.Price) : 0;
        }

        public string GetFirstImageUrl()
        {
            return ProductImages?.FirstOrDefault(i => i.IsActive == true)?.ImageURL ?? "/Content/img/featured/feature-1.jpg";
        }

        public double GetAverageRating()
        {
            var approvedReviews = ProductReviews?.Where(r => r.IsApproved == true).ToList();
            return approvedReviews != null && approvedReviews.Any() ? approvedReviews.Average(r => r.Rating) : 0;
        }

        public int GetReviewCount()
        {
            return ProductReviews?.Where(r => r.IsApproved == true).Count() ?? 0;
        }

        public bool HasActiveVariants()
        {
            return ProductVariants?.Any(v => v.IsActive == true) ?? false;
        }

        public bool HasApprovedReviews()
        {
            return ProductReviews?.Any(r => r.IsApproved == true) ?? false;
        }
    }
}
