@model WebBanGiay.Models.Product

@{
    ViewBag.Title = "Edit";
    Layout = "~/Areas/NhanVienBanHang/Views/Shared/_Layout_NVBH.cshtml";
}

<div class="max-w-4xl mx-auto px-4 py-8">
    <div class="mb-8">
        <h2 class="text-3xl font-bold text-gray-800">Edit Product</h2>
        <div class="w-20 h-1 bg-blue-500 mt-2 mb-6"></div>
    </div>

    @using (Html.BeginForm())
    {
        @Html.AntiForgeryToken()

        <div class="bg-white shadow-md rounded-lg p-6 mb-6">
            @Html.ValidationSummary(true, "", new { @class = "text-red-500 text-sm mb-4" })
            @Html.HiddenFor(model => model.ProductID)

            <div class="grid grid-cols-1 md:grid-cols-2 gap-6 mb-6">
                <!-- Column 1 -->
                <div class="space-y-4">
                    <div class="form-group">
                        @Html.LabelFor(model => model.ProductName, htmlAttributes: new { @class = "block text-sm font-medium text-gray-700 mb-1" })
                        @Html.EditorFor(model => model.ProductName, new { htmlAttributes = new { @class = "mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 sm:text-sm" } })
                        @Html.ValidationMessageFor(model => model.ProductName, "", new { @class = "text-red-500 text-xs italic" })
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.ProductCode, htmlAttributes: new { @class = "block text-sm font-medium text-gray-700 mb-1" })
                        @Html.EditorFor(model => model.ProductCode, new { htmlAttributes = new { @class = "mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 sm:text-sm" } })
                        @Html.ValidationMessageFor(model => model.ProductCode, "", new { @class = "text-red-500 text-xs italic" })
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.CategoryID, "Category", htmlAttributes: new { @class = "block text-sm font-medium text-gray-700 mb-1" })
                        @Html.DropDownList("CategoryID", null, htmlAttributes: new { @class = "mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 sm:text-sm" })
                        @Html.ValidationMessageFor(model => model.CategoryID, "", new { @class = "text-red-500 text-xs italic" })
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.BrandID, "Brand", htmlAttributes: new { @class = "block text-sm font-medium text-gray-700 mb-1" })
                        @Html.DropDownList("BrandID", null, htmlAttributes: new { @class = "mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 sm:text-sm" })
                        @Html.ValidationMessageFor(model => model.BrandID, "", new { @class = "text-red-500 text-xs italic" })
                    </div>
                </div>

                <!-- Column 2 -->
                <div class="space-y-4">
                    <div class="form-group">
                        @Html.LabelFor(model => model.MaterialID, "MaterialID", htmlAttributes: new { @class = "block text-sm font-medium text-gray-700 mb-1" })
                        @Html.DropDownList("MaterialID", null, htmlAttributes: new { @class = "mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 sm:text-sm" })
                        @Html.ValidationMessageFor(model => model.MaterialID, "", new { @class = "text-red-500 text-xs italic" })
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.Gender, htmlAttributes: new { @class = "block text-sm font-medium text-gray-700 mb-1" })
                        <select name="Gender" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500">
                            <option value="">-- Select Gender --</option>
                            <option value="Nam" @(Model.Gender == "Nam" ? "selected" : "")>Nam</option>
                            <option value="Nữ" @(Model.Gender == "Nữ" ? "selected" : "")>Nữ</option>
                        </select>
                        @Html.ValidationMessageFor(model => model.Gender, "", new { @class = "text-red-500 text-xs italic" })
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.IsActive, htmlAttributes: new { @class = "block text-sm font-medium text-gray-700 mb-1" })
                        <div class="mt-1 flex items-center">
                            @Html.EditorFor(model => model.IsActive, new { htmlAttributes = new { @class = "h-4 w-4 rounded border-gray-300 text-blue-600 focus:ring-blue-500" } })
                            <span class="ml-2 text-sm text-gray-700">Active</span>
                        </div>
                        @Html.ValidationMessageFor(model => model.IsActive, "", new { @class = "text-red-500 text-xs italic" })
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.CreatedDate, htmlAttributes: new { @class = "block text-sm font-medium text-gray-700 mb-1" })
                        @Html.EditorFor(model => model.CreatedDate, new { htmlAttributes = new { @class = "mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 sm:text-sm" } })
                        @Html.ValidationMessageFor(model => model.CreatedDate, "", new { @class = "text-red-500 text-xs italic" })
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.CreatedBy, "Created By", htmlAttributes: new { @class = "block text-sm font-medium text-gray-700 mb-1" })
                        @Html.DropDownList("CreatedBy", null, htmlAttributes: new { @class = "mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 sm:text-sm" })
                        @Html.ValidationMessageFor(model => model.CreatedBy, "", new { @class = "text-red-500 text-xs italic" })
                    </div>
                </div>
            </div>

            <!-- Description (full width) -->
            <div class="form-group mb-6">
                @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "block text-sm font-medium text-gray-700 mb-1" })
                @Html.EditorFor(model => model.Description, new { htmlAttributes = new { @class = "mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 sm:text-sm", rows = "3" } })
                @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-red-500 text-xs italic" })
            </div>

            <!-- Action Buttons -->
            <div class="flex items-center justify-between pt-4 border-t border-gray-200">
                <a href="@Url.Action("Index")" class="inline-flex items-center px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" viewBox="0 0 20 20" fill="currentColor">
                        <path fill-rule="evenodd" d="M9.707 16.707a1 1 0 01-1.414 0l-6-6a1 1 0 010-1.414l6-6a1 1 0 011.414 1.414L5.414 9H17a1 1 0 110 2H5.414l4.293 4.293a1 1 0 010 1.414z" clip-rule="evenodd" />
                    </svg>
                    Back to List
                </a>
                <button type="submit" class="inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" viewBox="0 0 20 20" fill="currentColor">
                        <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd" />
                    </svg>
                    Save Changes
                </button>
            </div>
        </div>
    }
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}

