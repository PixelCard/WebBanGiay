@model WebBanGiay.Models.ProductVariant

@{
    ViewBag.Title = "Create";
    Layout = "~/Areas/NhanVienBanHang/Views/Shared/_Layout_NVBH.cshtml";
}

<div class="max-w-4xl mx-auto p-6">
    <h2 class="text-2xl font-bold mb-6">Create Product Variant</h2>

    @using (Html.BeginForm())
    {
        @Html.AntiForgeryToken()

        <div class="bg-white shadow-md rounded-lg p-6">
            @Html.ValidationSummary(true, "", new { @class = "text-red-500 mb-4" })

            <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                <!-- Product Dropdown -->
                <div class="form-group">
                    @Html.LabelFor(model => model.ProductID, "Product", htmlAttributes: new { @class = "block text-sm font-medium text-gray-700 mb-1" })
                    @Html.DropDownList("ProductID", null, htmlAttributes: new { @class = "mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500" })
                    @Html.ValidationMessageFor(model => model.ProductID, "", new { @class = "text-red-500 text-sm" })
                </div>

                <!-- Color Dropdown -->
                <div class="form-group">
                    @Html.LabelFor(model => model.ColorID, "Color", htmlAttributes: new { @class = "block text-sm font-medium text-gray-700 mb-1" })
                    @Html.DropDownList("ColorID", null, htmlAttributes: new { @class = "mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500" })
                    @Html.ValidationMessageFor(model => model.ColorID, "", new { @class = "text-red-500 text-sm" })
                </div>

                <!-- Size Dropdown -->
                <div class="form-group">
                    @Html.LabelFor(model => model.SizeID, "Size", htmlAttributes: new { @class = "block text-sm font-medium text-gray-700 mb-1" })
                    @Html.DropDownList("SizeID", null, htmlAttributes: new { @class = "mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500" })
                    @Html.ValidationMessageFor(model => model.SizeID, "", new { @class = "text-red-500 text-sm" })
                </div>

                <!-- SKU Input -->
                <div class="form-group">
                    @Html.LabelFor(model => model.SKU, htmlAttributes: new { @class = "block text-sm font-medium text-gray-700 mb-1" })
                    @Html.EditorFor(model => model.SKU, new { htmlAttributes = new { @class = "mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500" } })
                    @Html.ValidationMessageFor(model => model.SKU, "", new { @class = "text-red-500 text-sm" })
                </div>

                <!-- Price Input -->
                <div class="form-group">
                    @Html.LabelFor(model => model.Price, htmlAttributes: new { @class = "block text-sm font-medium text-gray-700 mb-1" })
                    @Html.EditorFor(model => model.Price, new { htmlAttributes = new { @class = "mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500" } })
                    @Html.ValidationMessageFor(model => model.Price, "", new { @class = "text-red-500 text-sm" })
                </div>

                <!-- Stock Quantity Input -->
                <div class="form-group">
                    @Html.LabelFor(model => model.StockQuantity, htmlAttributes: new { @class = "block text-sm font-medium text-gray-700 mb-1" })
                    <div class="relative mt-1">
                        @Html.EditorFor(model => model.StockQuantity, new
                        {
                            htmlAttributes = new
                            {
                                @class = "block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500",
                                @type = "number",
                                @min = "0",
                                @onkeydown = "return event.keyCode !== 69 && event.keyCode !== 189",
                                @id = "stockQuantity"
                            }
                        })
                        @Html.ValidationMessageFor(model => model.StockQuantity, "", new { @class = "text-red-500 text-sm" })
                    </div>
                </div>

                <!-- IsActive Checkbox -->
                <div class="form-group flex items-center">
                    @Html.EditorFor(model => model.IsActive, new { htmlAttributes = new { @class = "h-4 w-4 rounded border-gray-300 text-blue-600 focus:ring-blue-500" } })
                    @Html.LabelFor(model => model.IsActive, htmlAttributes: new { @class = "ml-2 block text-sm text-gray-700" })
                    @Html.ValidationMessageFor(model => model.IsActive, "", new { @class = "text-red-500 text-sm" })
                </div>
            </div>

            <!-- Submit Button -->
            <div class="mt-8 flex justify-between">
                <button type="submit" class="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2">
                    Create
                </button>

                @Html.ActionLink("Back to List", "Index", null, new { @class = "px-4 py-2 border border-gray-300 rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2" })
            </div>
        </div>
    }
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}


<script>
    document.addEventListener('DOMContentLoaded', function() {
        const stockInput = document.getElementById('stockQuantity');

        // Xử lý khi người dùng nhập trực tiếp
        stockInput.addEventListener('input', function() {
            if (parseInt(this.value) < 0) {
                this.value = 0;
            }
        });

        // Xử lý khi dùng nút tăng/giảm
        stockInput.addEventListener('change', function() {
            if (parseInt(this.value) < 0) {
                this.value = 0;
            }
        });
    });
</script>
